// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "tigl_internal.h"

namespace tigl
{
namespace generated
{
    // This class is used in:
    // CPACSProfileBasedStructuralElement

    // generated from /xsd:schema/xsd:complexType[653]
    /// <summary>
    /// <para>
    /// materialDefinitionForProfileBasedPointType</para>
    /// </summary>
    /// <remarks>
    /// <para>
    /// MaterialDefinitionForProfileBased type, containing a
    /// material definition (Reference to material and thickness) for
    /// profile based objects, addition point reinforcements</para>
    /// </remarks>
    class CPACSMaterialDefinitionForProfileBasedPoint
    {
    public:
        TIGL_EXPORT CPACSMaterialDefinitionForProfileBasedPoint();
        TIGL_EXPORT virtual ~CPACSMaterialDefinitionForProfileBasedPoint();

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetPointUID() const;
        TIGL_EXPORT virtual void SetPointUID(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const std::string& GetMaterialUID() const;
        TIGL_EXPORT virtual void SetMaterialUID(const std::string& value);

        TIGL_EXPORT virtual const double& GetCrossSectionArea() const;
        TIGL_EXPORT virtual void SetCrossSectionArea(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetOptionalAux1() const;
        TIGL_EXPORT virtual void SetOptionalAux1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetOptionalAux2() const;
        TIGL_EXPORT virtual void SetOptionalAux2(const boost::optional<double>& value);

    protected:
        /// uID of the profile point to which the
        /// additional stiffness shall be applied.
        boost::optional<std::string> m_pointUID;

        /// uID of a material definition.
        std::string                  m_materialUID;

        /// cross sectional area of additional long.
        /// stiffener at strctural element point
        double                       m_crossSectionArea;

        /// optional auxiliary parameter for special use
        /// (no physical meaning)
        boost::optional<double>      m_optionalAux1;

        /// optional auxiliary parameter for special use
        /// (no physical meaning)
        boost::optional<double>      m_optionalAux2;

    private:
#ifdef HAVE_CPP11
        CPACSMaterialDefinitionForProfileBasedPoint(const CPACSMaterialDefinitionForProfileBasedPoint&) = delete;
        CPACSMaterialDefinitionForProfileBasedPoint& operator=(const CPACSMaterialDefinitionForProfileBasedPoint&) = delete;

        CPACSMaterialDefinitionForProfileBasedPoint(CPACSMaterialDefinitionForProfileBasedPoint&&) = delete;
        CPACSMaterialDefinitionForProfileBasedPoint& operator=(CPACSMaterialDefinitionForProfileBasedPoint&&) = delete;
#else
        CPACSMaterialDefinitionForProfileBasedPoint(const CPACSMaterialDefinitionForProfileBasedPoint&);
        CPACSMaterialDefinitionForProfileBasedPoint& operator=(const CPACSMaterialDefinitionForProfileBasedPoint&);
#endif
    };
} // namespace generated

// Aliases in tigl namespace
#ifdef HAVE_CPP11
using CCPACSMaterialDefinitionForProfileBasedPoint = generated::CPACSMaterialDefinitionForProfileBasedPoint;
#else
typedef generated::CPACSMaterialDefinitionForProfileBasedPoint CCPACSMaterialDefinitionForProfileBasedPoint;
#endif
} // namespace tigl
