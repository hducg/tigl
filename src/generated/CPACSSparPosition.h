// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <boost/optional.hpp>
#include <boost/utility/in_place_factory.hpp>
#include <string>
#include <tixi.h>
#include "tigl_internal.h"

namespace tigl
{
class CTiglUIDManager;
class CCPACSWingSparPositions;

namespace generated
{
    // This class is used in:
    // CPACSSparPositions

    // generated from /xsd:schema/xsd:complexType[813]
    /// <summary>
    /// <para>
    /// Spar position on the wing</para>
    /// </summary>
    /// <remarks>
    /// <content>
    /// <para>
    /// sparPositionType, a sparPostion defines a location
    /// within the componentSegment where a spar in mounted. Eta and xsi
    /// are relative to the componentSegment.</para>
    /// <para>
    /// Please find below a picture for an example definition
    /// of 3 spars in one wing, by using spar position points and spar
    /// segments:</para>
    /// <mediaLink>
    /// <image width="500" href="spars1">
    /// </image>
    /// </mediaLink>
    /// <para>
    /// As an alternative to the relative eta coordinate it is
    /// possible to specify an elementUID so that the spar position is
    /// relative to the outer geometry, e.g. kink, of the wing.</para>
    /// </content>
    /// </remarks>
    class CPACSSparPosition
    {
    public:
        TIGL_EXPORT CPACSSparPosition(CCPACSWingSparPositions* parent, CTiglUIDManager* uidMgr);

        TIGL_EXPORT virtual ~CPACSSparPosition();

        TIGL_EXPORT CCPACSWingSparPositions* GetParent();

        TIGL_EXPORT const CCPACSWingSparPositions* GetParent() const;

        TIGL_EXPORT CTiglUIDManager& GetUIDManager();
        TIGL_EXPORT const CTiglUIDManager& GetUIDManager() const;

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT bool ValidateChoices() const;

        TIGL_EXPORT virtual const boost::optional<std::string>& GetUID() const;
        TIGL_EXPORT virtual void SetUID(const boost::optional<std::string>& value);

        TIGL_EXPORT virtual const double& GetXsi() const;
        TIGL_EXPORT virtual void SetXsi(const double& value);

        TIGL_EXPORT virtual const boost::optional<double>& GetEta_choice1() const;
        TIGL_EXPORT virtual void SetEta_choice1(const boost::optional<double>& value);

        TIGL_EXPORT virtual const boost::optional<std::string>& GetElementUID_choice2() const;
        TIGL_EXPORT virtual void SetElementUID_choice2(const boost::optional<std::string>& value);

    protected:
        CCPACSWingSparPositions* m_parent;

        CTiglUIDManager* m_uidMgr;

        boost::optional<std::string> m_uID;

        /// Xsi coordinate of the spar definition point.
        double                       m_xsi;

        /// Eta coordinate of the spar definition point.
        boost::optional<double>      m_eta_choice1;

        /// Link to a section element.
        boost::optional<std::string> m_elementUID_choice2;

    private:
#ifdef HAVE_CPP11
        CPACSSparPosition(const CPACSSparPosition&) = delete;
        CPACSSparPosition& operator=(const CPACSSparPosition&) = delete;

        CPACSSparPosition(CPACSSparPosition&&) = delete;
        CPACSSparPosition& operator=(CPACSSparPosition&&) = delete;
#else
        CPACSSparPosition(const CPACSSparPosition&);
        CPACSSparPosition& operator=(const CPACSSparPosition&);
#endif
    };
} // namespace generated

// CPACSSparPosition is customized, use type CCPACSWingSparPosition directly
} // namespace tigl
