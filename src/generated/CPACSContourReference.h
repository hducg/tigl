// Copyright (c) 2018 RISC Software GmbH
//
// This file was generated by CPACSGen from CPACS XML Schema (c) German Aerospace Center (DLR/SC).
// Do not edit, all changes are lost when files are re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <string>
#include <tixi.h>
#include "tigl_internal.h"

namespace tigl
{
namespace generated
{
    // This class is used in:
    // CPACSControlSurfaceBorderTrailingEdge

    // generated from /xsd:schema/xsd:complexType[153]
    /// <summary>
    /// <para>
    /// Airfoil definition of an control surface at the
    /// inner/outer border.</para>
    /// </summary>
    /// <remarks>
    /// <content>
    /// <para>
    /// Optional definition of the exact airfoil shape at the
    /// inner/outer border of the control surface.</para>
    /// <para>
    /// The airfoil shape is defined via referencing to the
    /// airfoilUID. As the leading and trailing edge point is fix due to
    /// the outer shape definition of the control surface the airfoil
    /// can only be rotated around the x-axis (axis going from leading
    /// to trailing edge of the inner/outer border of the control
    /// surface). Scaling in x-direction is also defined by the outer
    /// shape, wherefore only scaling in y and z direction is allowed.</para>
    /// </content>
    /// </remarks>
    class CPACSContourReference
    {
    public:
        TIGL_EXPORT CPACSContourReference();
        TIGL_EXPORT virtual ~CPACSContourReference();

        TIGL_EXPORT virtual void ReadCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath);
        TIGL_EXPORT virtual void WriteCPACS(const TixiDocumentHandle& tixiHandle, const std::string& xpath) const;

        TIGL_EXPORT virtual const std::string& GetAirfoilUID() const;
        TIGL_EXPORT virtual void SetAirfoilUID(const std::string& value);

        TIGL_EXPORT virtual const double& GetRotX() const;
        TIGL_EXPORT virtual void SetRotX(const double& value);

        TIGL_EXPORT virtual const double& GetScalY() const;
        TIGL_EXPORT virtual void SetScalY(const double& value);

        TIGL_EXPORT virtual const double& GetScalZ() const;
        TIGL_EXPORT virtual void SetScalZ(const double& value);

    protected:
        /// Reference to the airfoil uID.
        std::string m_airfoilUID;

        /// Rotation around an axis, going from the
        /// leading edge point to the trailing edge point of the inner/outer
        /// border of the control surface. Defaults to 90Â°, which is
        /// equivalent to perpendicular on the control surface middle plane.
        double      m_rotX;

        /// Scaling of the airfoil in spanwise direction
        /// (not used for 2D airfoils).
        double      m_scalY;

        /// Scaling in thickness direction of the airfoil.
        double      m_scalZ;

    private:
#ifdef HAVE_CPP11
        CPACSContourReference(const CPACSContourReference&) = delete;
        CPACSContourReference& operator=(const CPACSContourReference&) = delete;

        CPACSContourReference(CPACSContourReference&&) = delete;
        CPACSContourReference& operator=(CPACSContourReference&&) = delete;
#else
        CPACSContourReference(const CPACSContourReference&);
        CPACSContourReference& operator=(const CPACSContourReference&);
#endif
    };
} // namespace generated

// Aliases in tigl namespace
#ifdef HAVE_CPP11
using CCPACSContourReference = generated::CPACSContourReference;
#else
typedef generated::CPACSContourReference CCPACSContourReference;
#endif
} // namespace tigl
